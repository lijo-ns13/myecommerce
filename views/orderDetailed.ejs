<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Order Details</title>
        <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
            rel="stylesheet">
        <link rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
        <link rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
        <style>
        body {
            background-color: #f4f7fa;
            font-family: 'Roboto', sans-serif;
            color: #333;
        }
        .order-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            margin-top: 3rem;
            margin-bottom: 3rem;
            overflow: hidden;
        }
        .order-header {
            background: #3a6186;  /* fallback for old browsers */
            background: -webkit-linear-gradient(to right, #89253e, #3a6186);  /* Chrome 10-25, Safari 5.1-6 */
            background: linear-gradient(to right, #89253e, #3a6186); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
            color: white;
            padding: 2.5rem;
        }
        .product-image {
            max-width: 150px;
            border-radius: 8px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .product-image:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .status-badge {
            font-size: 1rem;
            padding: 0.5em 1.2em;
            border-radius: 25px;
            text-transform: uppercase;
            font-weight: bold;
        }
        .info-card {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 2rem;
            height: 100%;
            transition: box-shadow 0.3s ease;
            border: 1px solid #e9ecef;
        }
        .info-card:hover {
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        .price-breakdown {
            background-color: #e9ecef;
            border-radius: 10px;
            padding: 2rem;
        }
        .return-form-container {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 2.5rem;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.06);
            margin-top: 3rem;
            transition: all 0.3s ease;
        }
        .return-form-title {
            color: #2c3e50;
            margin-bottom: 1.5rem;
            font-weight: bold;
        }
        .return-form .form-control, .return-form .form-select {
            border: 2px solid #ced4da;
            border-radius: 8px;
            padding: 12px;
            transition: all 0.3s ease;
        }
        .return-form .form-control:focus, .return-form .form-select:focus {
            border-color: #3a6186;
            box-shadow: 0 0 0 0.25rem rgba(58, 97, 134, 0.25);
        }
        .btn-primary {
            background: #3a6186;
            border: none;
            border-radius: 8px;
            padding: 12px 25px;
            transition: all 0.3s ease;
        }
        .btn-primary:hover {
            background: #89253e;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(137, 37, 62, 0.4);
        }
        .product-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            border: none;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 2rem;
        }
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        .section-title {
            font-size: 1.8rem;
            color: #3a6186;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #3a6186;
        }
        .price-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }
        .total-price {
            font-size: 1.2rem;
            font-weight: bold;
            color: #89253e;
        }
    </style>
        <script>
        window.orderData = {
            orderId: '<%= order._id %>',
            totalPrice: <%= order.totalPrice %>,
            status: '<%= order.status %>'
        };
    </script>
    </head>

    <body>
        <nav
            class="navbar navbar-expand-lg navbar-light bg-light py-3 container-fluid">
            <!-- Navbar content remains unchanged -->
        </nav>

        <div class="container order-container">
            <div class="order-header">
                <h1 class="mb-2 display-4">Order Details</h1>
                <p class="mb-0 lead">Order #<%= order._id %></p>
            </div>

            <div class="p-5">
                <div
                    class="d-flex justify-content-between align-items-center mb-5">
                    <div>
                        <span class="fw-bold me-2">Status:</span>
                        <span
                            class="badge status-badge <%= order.status === 'delivered' ? 'bg-success' : 'bg-warning' %>">
                            <%= order.status.charAt(0).toUpperCase() +
                            order.status.slice(1) %>
                        </span>
                    </div>
                    <p class="mb-0">
                        <i class="fas fa-calendar me-2"></i>
                        Ordered on <%= new
                        Date(order.orderDate).toLocaleDateString('en-IN', {
                        year: 'numeric', month: 'long', day: 'numeric' }) %>
                    </p>
                </div>

                <h2 class="section-title">Products</h2>
                <% for (const orderData of order.orderedProducts) { %>
                <div class="card mb-4 product-card">
                    <div class="row g-0">
                        <div
                            class="col-md-3 d-flex align-items-center justify-content-center p-4">
                            <img src="<%= orderData.productImage %>"
                                alt="<%= orderData.productName %>"
                                class="product-image">
                        </div>
                        <div class="col-md-9">
                            <div class="card-body">
                                <h5 class="card-title fs-4 mb-3"><%=
                                    orderData.productName %></h5>
                                <p class="card-text mb-3">
                                    <span
                                        class="badge bg-light text-dark me-2">Size:
                                        <%= orderData.productSize %></span>
                                    <span
                                        class="badge bg-light text-dark">Quantity:
                                        <%= orderData.productQuantity %></span>
                                </p>
                                <p
                                    class="card-text fw-bold fs-5 text-primary">â‚¹<%=
                                    orderData.productPrice.toLocaleString('en-IN')
                                    %></p>
                                <a
                                    href="/user/review/add/<%=orderData.productId%>">Rate
                                    Product</a>
                                <!-- cancel individual products -->
                                <% if (order.status === 'pending' ||
                                order.status === 'processing') { %>
                                <form id="cancelForm"
                                    action="/user/orders/cancelsingle/<%= order._id %>/<%= orderData.productId %>/<%=orderData.productSize%>/<%=orderData.productQuantity%>"
                                    method="post">

                                    <button type="submit">Cancel single
                                        product</button>
                                </form>
                                <% } %>

                            </div>
                        </div>
                    </div>
                </div>
                <% } %>

                <div class="row mt-5">
                    <div class="col-md-6 mb-4">
                        <div class="info-card">
                            <h3 class="mb-4"><i
                                    class="fas fa-map-marker-alt me-2"></i>Shipping
                                Address</h3>
                            <p class="mb-2"><%= order.shippingAddress.street
                                %></p>
                            <p class="mb-2"><%= order.shippingAddress.city %>,
                                <%= order.shippingAddress.state %> <%=
                                order.shippingAddress.postalCode %></p>
                            <p class="mb-2"><%= order.shippingAddress.country
                                %></p>
                            <p class="mb-0"><strong>Phone:</strong> <%=
                                order.shippingAddress.phoneNo %></p>
                        </div>
                    </div>
                    <div class="col-md-6 mb-4">
                        <div class="info-card">
                            <h3 class="mb-4"><i
                                    class="fas fa-credit-card me-2"></i>Payment
                                Details</h3>
                            <p class="mb-2"><strong>Method:</strong> <%=
                                order.paymentDetails.paymentMethod %></p>
                            <% if (order.paymentDetails.paymentMethod ===
                            'razorpay' || order.paymentDetails.paymentMethod ===
                            'wallet') { %>
                            <p class="mb-2"><strong>Amount Paid:</strong> â‚¹<%=
                                order.totalPrice.toLocaleString('en-IN') %></p>
                            <% } %>
                            <p class="mb-0"><strong>Transaction ID:</strong> <%=
                                order.paymentDetails.transactionId %></p>
                        </div>
                    </div>
                </div>

                <div class="price-breakdown mt-5">
                    <h3 class="mb-4"><i class="fas fa-receipt me-2"></i>Price
                        Breakdown</h3>
                    <div class="price-item">
                        <span>Original Price:</span>
                        <span>â‚¹<%= order.originalPrice.toLocaleString('en-IN')
                            %></span>
                    </div>
                    <div class="price-item">
                        <span>Discount:</span>
                        <span>â‚¹<%= (order.discount || 0).toLocaleString('en-IN')
                            %></span>
                    </div>
                    <hr>
                    <div class="price-item total-price">
                        <span>Total Price:</span>
                        <span>â‚¹<%= order.totalPrice.toLocaleString('en-IN')
                            %></span>
                    </div>
                </div>

                <%if(order.status==='pending' || order.status==='processing' ||
                order.status==='shipped'){%>
                <div class="alert alert-info mt-5" role="alert">
                    <i class="fas fa-truck me-2"></i>
                    Your order is expected to be delivered by <%= deliveryDate
                    %>.
                </div>
                <%}%>

                <% if (order.status === 'pending' || order.status ===
                'processing') { %>
                <button id="cancelOrderBtn"
                    class="btn btn-danger btn-lg w-100 mt-5">Cancel
                    Order</button>
                <% } %>
                <% if(order.status === 'delivered' ) { %>
                <button id="returnOrderBtn"
                    class="btn btn-primary btn-lg w-100 mt-5">Return
                    Order</button>

                <div id="returnOrderForm" class="return-form-container"
                    style="display: none;">
                    <h3 class="return-form-title">Return Order Form</h3>
                    <form action="/user/orders/return/<%=order._id%>"
                        method="post" class="return-form">
                        <div class="form-group mb-4">
                            <label for="reason" class="form-label">Reason for
                                Return:</label>
                            <select id="reason" name="reason"
                                class="form-select">
                                <option value>Select a reason</option>
                                <option value="wrong_item">Wrong item
                                    received</option>
                                <option value="defective">Item is
                                    defective</option>
                                <option value="not_as_described">Item not as
                                    described</option>
                                <option value="no_longer_needed">No longer
                                    needed</option>
                                <option value="other">Other </option>
                            </select>
                        </div>
                        <!-- <div id="otherReasonInput" class="form-group mb-4"
                            style="display: none;">
                            <label for="otherReason" class="form-label">Please
                                specify:</label>
                            <textarea id="otherReason" class="form-control"
                                rows="3"></textarea>
                        </div> -->
                        <button type="submit"
                            class="btn btn-primary btn-lg w-100 mt-4">Submit
                            Return Request</button>
                    </form>
                </div>
                <% } %>
                <% if (order.status === 'payment_failed') { %>
                <button id="payNowButton"
                    class="btn btn-primary btn-lg w-100 mt-5">Pay Now</button>
                <% } %>
                <div class="mt-5">
                    <a href="/user/orders"
                        class="btn btn-outline-primary btn-lg w-100">
                        <i class="fas fa-arrow-left me-2"></i>Back to My Orders
                    </a>
                </div>
            </div>
        </div>
        <!-- Include SweetAlert library -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <script
            src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>
// Client-side JavaScript (in your HTML file)
async function payNow() {
    console.log('clicked');
    const amount = window.orderData.totalPrice;
    console.log("Amount to pay:", amount);
    
    const response = await fetch('/create-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ amount, currency: 'INR', orderId: window.orderData.orderId, notes: {} })
    });

    const orderData = await response.json();
    console.log("Order Data:", orderData);
    
    const options = {
        key: 'rzp_test_ovddchQMnrblMK',
        amount: amount * 100,
        currency: 'INR',
        name: 'stridnest company',
        description: 'Test Transaction',
        order_id: orderData.razorpayOrderId,
        prefill: {
            name: 'Lijo N S',
            email: 'lijons13@gmail.com',
            contact: '8921580213'
        },
        theme: {
            color: '#F37254'
        },
        handler: function (response) {
            verifyPayment(response, orderData.razorpayOrderId, orderData.orderId);
        }
    };

    console.log("Razorpay Options:", options);
    
    const rzp = new Razorpay(options);
    rzp.open();
}

function verifyPayment(response, razorpayOrderId, orderId) {
    fetch('/api/verify-paymenttwo', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            razorpay_order_id: razorpayOrderId,
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_signature: response.razorpay_signature,
            order_id: orderId
        }),
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            window.location.href = `/checkout/order-confirmation/${orderId}`;
        } else {
            alert('Payment Verification Failed: ' + data.message);
        }
    })
    .catch(err => {
        console.error('Error verifying payment:', err);
        alert('Error verifying payment. Please try again.');
    });
}
    
        document.addEventListener('DOMContentLoaded', function() {
            const payNowButton = document.getElementById('payNowButton');
            if (payNowButton && window.orderData.status === 'payment_failed') {
                payNowButton.addEventListener('click', payNow);
            }
        });

        window.payNow = payNow;
    </script>

        <script>
        document.getElementById('returnOrderBtn').addEventListener('click', function () {
            const form = document.getElementById('returnOrderForm');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        });

        document.getElementById('reason').addEventListener('change', function () {
            const otherReasonInput = document.getElementById('otherReasonInput');
            if (this.value === 'other') {
                otherReasonInput.style.display = 'block';
            } else {
                otherReasonInput.style.display = 'none';
            }
        });

        document.querySelector('.return-form').addEventListener('submit', function (event) {
            const reasonSelect = document.getElementById('reason');
            const otherReasonTextarea = document.getElementById('otherReason');

            // If the selected reason is 'other', set the reason to the textarea value
            if (reasonSelect.value === 'other') {
                if (otherReasonTextarea.value.trim() === '') {
                    alert("Please specify a reason for 'Other'");
                    event.preventDefault(); // Prevent submission if no value is entered
                } else {
                    reasonSelect.value = otherReasonTextarea.value; // Set the select value to the textarea value
                }
            }
        });
    </script>
        <script>
        // Previous scripts remain unchanged

        // Add this new script for the cancel order functionality
        document.addEventListener('DOMContentLoaded', function() {
            const cancelOrderBtn = document.getElementById('cancelOrderBtn');
            if (cancelOrderBtn) {
                cancelOrderBtn.addEventListener('click', function() {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, cancel it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // If user confirms, submit the cancellation request
                            fetch(`/user/orders/<%= order._id %>/cancel`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    // Add any necessary headers, like CSRF token if required
                                },
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire(
                                        'Cancelled!',
                                        'Your order has been cancelled.',
                                        'success'
                                    ).then(() => {
                                        // Reload the page or redirect to order list
                                        window.location.reload();
                                    });
                                } else {
                                    Swal.fire(
                                        'Error!',
                                        'There was a problem cancelling your order. Please try again.',
                                        'error'
                                    );
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire(
                                    'Error!',
                                    'There was a problem cancelling your order. Please try again.',
                                    'error'
                                );
                            });
                        }
                    });
                });
            }
        });

        // Rest of the previous scripts remain unchanged
    </script>
        <script>
            document.querySelectorAll('form[id^="cancelForm"]').forEach(form => {
                form.addEventListener('submit', function(event) {
                    event.preventDefault(); // Prevent the default form submission
                    
                    const formData = new FormData(this); // Create a FormData object
        
                    fetch(this.action, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: data.message,
                                confirmButtonText: 'OK'
                            }).then(() => {
                                // Optionally redirect or reload the page
                                location.reload(); // Reloads the page to reflect changes
                            });
                        } else {
                            // Show error message
                            Swal.fire({
                                icon: 'warning',
                                title: 'Oops!',
                                text: data.message,
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Something went wrong. Please try again.',
                            confirmButtonText: 'OK'
                        });
                    });
                });
            });
        </script>

        <script
            src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    </html>