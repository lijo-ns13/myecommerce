<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Order Details</title>
        <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
            rel="stylesheet">
        <link rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
        <style>
        :root {
            --primary: #4f46e5;
            --primary-dark: #4338ca;
            --secondary: #64748b;
            --danger: #ef4444;
            --success: #22c55e;
            --warning: #f59e0b;
            --background: #f8fafc;
            --card-bg: #ffffff;
            --text: #1e293b;
            --border: #e2e8f0;
            --shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        }

        body {
            background-color: var(--background);
            color: var(--text);
            font-family: system-ui, -apple-system, sans-serif;
            line-height: 1.5;
        }

        .order-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .hero-section {
            background: linear-gradient(to right, var(--primary), var(--primary-dark));
            border-radius: 1rem;
            padding: 2.5rem;
            color: white;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }

        .hero-section::after {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;
            background: url('/api/placeholder/1200/300') center/cover;
            opacity: 0.1;
            pointer-events: none;
        }

        .status-card {
            background: var(--card-bg);
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .product-card {
            background: var(--card-bg);
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: var(--shadow);
            margin-bottom: 1.5rem;
            transition: transform 0.2s;
        }

        .product-card:hover {
            transform: translateY(-4px);
        }

        .product-image {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 0.5rem;
        }

        .badge {
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-weight: 500;
            font-size: 0.875rem;
        }

        .badge-primary {
            background: var(--primary);
            color: white;
        }

        .badge-success {
            background: var(--success);
            color: white;
        }

        .badge-warning {
            background: var(--warning);
            color: white;
        }

        .info-section {
            background: var(--card-bg);
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 1.5rem;
        }

        .price-breakdown {
            background: var(--card-bg);
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: var(--shadow);
        }

        .price-item {
            display: flex;
            justify-content: space-between;
            padding: 0.75rem 0;
            border-bottom: 1px solid var(--border);
        }

        .price-item:last-child {
            border-bottom: none;
            font-weight: 600;
            font-size: 1.125rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn-primary {
            background: var(--primary);
            border: none;
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .btn-danger {
            background: var(--danger);
            border: none;
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
            transform: translateY(-2px);
        }

        .return-form {
            background: var(--card-bg);
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: var(--shadow);
            margin-top: 2rem;
        }

        .form-control, .form-select {
            border: 1px solid var(--border);
            border-radius: 0.5rem;
            padding: 0.75rem;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);
        }
    </style>
    </head>
    <body>
        <div class="order-container">
            <div class="hero-section">
                <h1 class="mb-2">Order Details</h1>
                <p class="mb-0 opacity-75">Order #<%= order._id %></p>
            </div>

            <div class="status-card">
                <div class="d-flex align-items-center gap-3">
                    <span
                        class="badge <%= order.status === 'delivered' ? 'badge-success' : 'badge-warning' %>">
                        <%= order.status.charAt(0).toUpperCase() +
                        order.status.slice(1) %>
                    </span>
                    <div class="vr"></div>
                    <span>
                        <i class="fas fa-calendar me-2"></i>
                        <%= new
                        Date(order.orderDate).toLocaleDateString('en-IN', {
                        year: 'numeric', month: 'long', day: 'numeric' }) %>
                    </span>
                </div>
                <% if(order.status==='pending' || order.status==='processing' ||
                order.status==='shipped'){ %>
                <div class="text-secondary">
                    <i class="fas fa-truck me-2"></i>
                    Expected delivery: <%= deliveryDate %>
                </div>
                <% } %>
            </div>

            <div class="row">
                <div class="col-md-8">
                    <h3 class="mb-4">Products</h3>
                    <% for (const orderData of order.orderedProducts) { %>
                    <div class="product-card">
                        <div class="d-flex p-3 gap-4">
                            <img src="<%= orderData.productImage %>"
                                alt="<%= orderData.productName %>"
                                class="product-image">
                            <div class="flex-grow-1">
                                <h5 class="mb-3"><%= orderData.productName
                                    %></h5>
                                <div class="d-flex gap-2 mb-3">
                                    <span class="badge bg-light text-dark">Size:
                                        <%= orderData.productSize %></span>
                                    <span class="badge bg-light text-dark">Qty:
                                        <%= orderData.productQuantity %></span>
                                </div>
                                <div
                                    class="d-flex justify-content-between align-items-center">
                                    <span class="fs-5 fw-bold text-primary">â‚¹<%=
                                        orderData.productPrice.toLocaleString('en-IN')
                                        %></span>
                                    <div class="d-flex gap-2">
                                        <a
                                            href="/user/review/add/<%= orderData.productId %>"
                                            class="btn btn-sm btn-outline-primary">Rate
                                            Product</a>
                                        <% if (order.status === 'pending' ||
                                        order.status === 'processing') { %>
                                        <form id="cancelForm"
                                            action="/user/orders/cancelsingle/<%= order._id %>/<%= orderData.productId %>/<%= orderData.productSize %>/<%= orderData.productQuantity %>"
                                            method="post" class="d-inline">
                                            <button type="submit"
                                                class="btn btn-sm btn-outline-danger">Cancel
                                                Item</button>
                                        </form>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <% } %>
                </div>

                <div class="col-md-4">
                    <div class="info-section mb-4">
                        <h4 class="mb-3">Shipping Address</h4>
                        <address class="mb-0">
                            <%= order.shippingAddress.street %><br>
                            <%= order.shippingAddress.city %>, <%=
                            order.shippingAddress.state %> <%=
                            order.shippingAddress.postalCode %><br>
                            <%= order.shippingAddress.country %><br>
                            <strong>Phone:</strong> <%=
                            order.shippingAddress.phoneNo %>
                        </address>
                    </div>

                    <div class="info-section mb-4">
                        <h4 class="mb-3">Payment Details</h4>
                        <p class="mb-2"><strong>Method:</strong> <%=
                            order.paymentDetails.paymentMethod %></p>
                        <% if (order.paymentDetails.paymentMethod === 'razorpay'
                        || order.paymentDetails.paymentMethod === 'wallet') { %>
                        <p class="mb-2"><strong>Amount Paid:</strong> â‚¹<%=
                            order.totalPrice.toLocaleString('en-IN') %></p>
                        <% } %>
                        <p class="mb-0"><strong>Transaction ID:</strong> <%=
                            order.paymentDetails.transactionId %></p>
                    </div>

                    <div class="price-breakdown">
                        <h4 class="mb-3">Price Details</h4>
                        <div class="price-item">
                            <span>Original Price</span>
                            <span>â‚¹<%=
                                order.originalPrice.toLocaleString('en-IN')
                                %></span>
                        </div>
                        <div class="price-item">
                            <span>Discount</span>
                            <span>â‚¹<%= (order.discount ||
                                0).toLocaleString('en-IN') %></span>
                        </div>
                        <div class="price-item">
                            <span>Total Amount</span>
                            <span>â‚¹<%= order.totalPrice.toLocaleString('en-IN')
                                %></span>
                        </div>
                    </div>

                    <% if (order.status === 'pending' || order.status ===
                    'processing') { %>
                    <button id="cancelOrderBtn"
                        class="btn btn-danger w-100 mt-4">Cancel Order</button>
                    <% } %>

                    <% if(order.status === 'delivered' ) { %>
                    <button id="returnOrderBtn"
                        class="btn btn-primary w-100 mt-4">Return Order</button>
                    <% } %>

                    <% if (order.status === 'payment_failed') { %>
                    <button id="payNowButton"
                        class="btn btn-primary w-100 mt-4">Pay Now</button>
                    <% } %>

                    <a href="/user/orders/download-invoice/<%= order._id %>"
                        class="btn btn-outline-primary w-100 mt-3">
                        <i class="fas fa-download me-2"></i>Download Invoice
                    </a>

                    <a href="/user/orders"
                        class="btn btn-outline-secondary w-100 mt-3">
                        <i class="fas fa-arrow-left me-2"></i>Back to Orders
                    </a>
                </div>
            </div>

            <div id="returnOrderForm" class="return-form"
                style="display: none;">
                <h3 class="mb-4">Return Order Form</h3>
                <form action="/user/orders/return/<%= order._id %>"
                    method="post">
                    <div class="mb-4">
                        <label class="form-label">Reason for Return:</label>
                        <select name="reason" class="form-select">
                            <option value>Select a reason</option>
                            <option value="wrong_item">Wrong item
                                received</option>
                            <option value="defective">Item is defective</option>
                            <option value="not_as_described">Item not as
                                described</option>
                            <option value="no_longer_needed">No longer
                                needed</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Submit
                        Return Request</button>
                </form>
            </div>
        </div>
        <script>
            // Initialize order data
            window.orderData = {
                totalPrice: <%= order.totalPrice %>,
                orderId: '<%= order._id %>',
                status: '<%= order.status %>'
            };
        </script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>
// Client-side JavaScript (in your HTML file)
async function payNow() {
    console.log('clicked');
    const amount = window.orderData.totalPrice;
    console.log("Amount to pay:", amount);
    
    const response = await fetch('/create-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ amount, currency: 'INR', orderId: window.orderData.orderId, notes: {} })
    });

    const orderData = await response.json();
    console.log("Order Data:", orderData);
    
    const options = {
        key: 'rzp_test_ovddchQMnrblMK',
        amount: amount * 100,
        currency: 'INR',
        name: 'stridnest company',
        description: 'Test Transaction',
        order_id: orderData.razorpayOrderId,
        prefill: {
            name: 'Lijo N S',
            email: 'lijons13@gmail.com',
            contact: '8921580213'
        },
        theme: {
            color: '#F37254'
        },
        handler: function (response) {
            verifyPayment(response, orderData.razorpayOrderId, orderData.orderId);
        }
    };

    console.log("Razorpay Options:", options);
    
    const rzp = new Razorpay(options);
    rzp.open();
}

function verifyPayment(response, razorpayOrderId, orderId) {
    fetch('/api/verify-paymenttwo', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            razorpay_order_id: razorpayOrderId,
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_signature: response.razorpay_signature,
            order_id: orderId
        }),
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            window.location.href = `/checkout/order-confirmation/${orderId}`;
        } else {
            alert('Payment Verification Failed: ' + data.message);
        }
    })
    .catch(err => {
        console.error('Error verifying payment:', err);
        alert('Error verifying payment. Please try again.');
    });
}
    
        document.addEventListener('DOMContentLoaded', function() {
            const payNowButton = document.getElementById('payNowButton');
            if (payNowButton && window.orderData.status === 'payment_failed') {
                payNowButton.addEventListener('click', payNow);
            }
        });

        window.payNow = payNow;
    </script>

        <script>
        document.getElementById('returnOrderBtn').addEventListener('click', function () {
            const form = document.getElementById('returnOrderForm');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        });

        document.getElementById('reason').addEventListener('change', function () {
            const otherReasonInput = document.getElementById('otherReasonInput');
            if (this.value === 'other') {
                otherReasonInput.style.display = 'block';
            } else {
                otherReasonInput.style.display = 'none';
            }
        });

        document.querySelector('.return-form').addEventListener('submit', function (event) {
            const reasonSelect = document.getElementById('reason');
            const otherReasonTextarea = document.getElementById('otherReason');

            // If the selected reason is 'other', set the reason to the textarea value
            if (reasonSelect.value === 'other') {
                if (otherReasonTextarea.value.trim() === '') {
                    alert("Please specify a reason for 'Other'");
                    event.preventDefault(); // Prevent submission if no value is entered
                } else {
                    reasonSelect.value = otherReasonTextarea.value; // Set the select value to the textarea value
                }
            }
        });
    </script>
        <script>
        // Previous scripts remain unchanged

        // Add this new script for the cancel order functionality
        document.addEventListener('DOMContentLoaded', function() {
            const cancelOrderBtn = document.getElementById('cancelOrderBtn');
            if (cancelOrderBtn) {
                cancelOrderBtn.addEventListener('click', function() {
                    Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, cancel it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // If user confirms, submit the cancellation request
                            fetch(`/user/orders/<%= order._id %>/cancel`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    // Add any necessary headers, like CSRF token if required
                                },
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    Swal.fire(
                                        'Cancelled!',
                                        'Your order has been cancelled.',
                                        'success'
                                    ).then(() => {
                                        // Reload the page or redirect to order list
                                        window.location.reload();
                                    });
                                } else {
                                    Swal.fire(
                                        'Error!',
                                        'There was a problem cancelling your order. Please try again.',
                                        'error'
                                    );
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire(
                                    'Error!',
                                    'There was a problem cancelling your order. Please try again.',
                                    'error'
                                );
                            });
                        }
                    });
                });
            }
        });

        // Rest of the previous scripts remain unchanged
    </script>
        <script>
            document.querySelectorAll('form[id^="cancelForm"]').forEach(form => {
                form.addEventListener('submit', function(event) {
                    event.preventDefault(); // Prevent the default form submission
                    
                    const formData = new FormData(this); // Create a FormData object
        
                    fetch(this.action, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show success message
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: data.message,
                                confirmButtonText: 'OK'
                            }).then(() => {
                                // Optionally redirect or reload the page
                                location.reload(); // Reloads the page to reflect changes
                            });
                        } else {
                            // Show error message
                            Swal.fire({
                                icon: 'warning',
                                title: 'Oops!',
                                text: data.message,
                                confirmButtonText: 'OK'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Something went wrong. Please try again.',
                            confirmButtonText: 'OK'
                        });
                    });
                });
            });
        </script>

        <script
            src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    </html>