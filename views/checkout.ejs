<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Checkout</title>
        <!-- Bootstrap CSS -->
        <link
            href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
            rel="stylesheet">
        <!-- Font Awesome -->
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css"
            rel="stylesheet">
        <style>
                body {
                    background-color: #f8f9fa;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                }
        
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 2rem;
                }
        
                .checkout-header {
                    border-bottom: 2px solid #007bff;
                    padding-bottom: 1rem;
                    margin-bottom: 2rem;
                    text-align: center;
                    color: #007bff;
                    font-weight: 300;
                    font-size: 2.5rem;
                }
        
                .cart-item {
                    background-color: #ffffff;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                    padding: 1.5rem;
                    margin-bottom: 1.5rem;
                    transition: transform 0.3s ease;
                }
        
                .cart-item:hover {
                    transform: translateY(-5px);
                }
        
                .cart-img {
                    max-width: 120px;
                    max-height: 120px;
                    object-fit: cover;
                    border-radius: 4px;
                }
        
                .total-pricing {
                    background-color: #ffffff;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                    padding: 1.5rem;
                    margin-top: 2rem;
                }
        
                .coupon-container {
                    background-color: #ffffff;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                    padding: 1.5rem;
                    margin: 2rem 0;
                }
        
                .coupon-form {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
        
                .form-control {
                    border-radius: 20px;
                    padding: 0.75rem 1.5rem;
                }
        
                .btn {
                    border-radius: 20px;
                    padding: 0.75rem 1.5rem;
                    font-weight: 600;
                    transition: all 0.3s ease;
                }
        
                .btn-primary {
                    background-color: #007bff;
                    border-color: #007bff;
                }
        
                .btn-primary:hover {
                    background-color: #0056b3;
                    border-color: #0056b3;
                }
        
                .discount-message {
                    margin-top: 1rem;
                    font-size: 1rem;
                    color: #28a745;
                }
        
                .address-form,
                .payment-form {
                    background-color: #ffffff;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
                    padding: 1.5rem;
                    margin-top: 2rem;
                }
        
                .form-check-label {
                    padding-left: 0.5rem;
                }
        
                footer {
                    margin-top: 3rem;
                    padding: 2rem 0;
                    background-color: #343a40;
                    color: #ffffff;
                }
        
                /* Animation for success messages */
                @keyframes fadeInUp {
                    from {
                        opacity: 0;
                        transform: translateY(20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
        
                .animate-fade-in-up {
                    animation: fadeInUp 0.5s ease-out;
                }
            </style>

    </head>

    <body>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="/"><img src="img/logo.png" alt="Logo"
                    height="40"></a>
            <button class="navbar-toggler" type="button" data-toggle="collapse"
                data-target="#navbarNav" aria-controls="navbarNav"
                aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item"><a class="nav-link"
                            href="/">Home</a></li>
                    <li class="nav-item"><a class="nav-link"
                            href="/products">Products</a></li>
                    <li class="nav-item"><a class="nav-link"
                            href="/about">About</a></li>
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item"><a class="nav-link"
                            href="/auth/signin"><img src="img/log-in.png"
                                alt="Login" height="30"></a></li>
                    <li class="nav-item"><a class="nav-link" href="/cart"><img
                                src="img/cart.png" alt="Cart"
                                height="30"></a></li>
                    <li class="nav-item"><a class="nav-link"
                            href="/user/wishlist"><img src="img/wishlist.png"
                                alt="Wishlist" height="30"></a></li>
                    <li class="nav-item"><a class="nav-link"
                            href="/user/profile"><img src="img/userprofile.jpg"
                                alt="User Profile" height="30"></a></li>
                </ul>
            </div>
        </nav>

        <div class="container mt-5">
            <h2 class="checkout-header">Secure Checkout</h2>

            <!-- Coupon Check Form -->
            <div class="coupon-container">
                <h4><i class="fas fa-tags"></i> Apply Coupon</h4>
                <form id="couponCheckForm" class="coupon-form">
                    <input type="text" name="couponCode" id="couponCode"
                        placeholder="Enter your coupon code"
                        class="form-control mb-2">
                    <button type="submit" class="btn btn-primary">Apply
                        Coupon</button>
                </form>
                <div id="discountMessage" class="discount-message"></div>
                <div id="couponError" class="coupon-error text-danger"></div>
                <button id="removeCoupon" class="btn btn-outline-danger mt-2"
                    style="display:none;">Remove Coupon</button>
            </div>

            <!-- Cart Items -->
            <h4><i class="fas fa-shopping-cart"></i> Your Cart</h4>
            <% if (cart && cart.products && cart.products.length > 0) { %>
            <div class="row">
                <% for (const product of cart.products) { %>
                <div class="col-12 cart-item">
                    <div class="row align-items-center">
                        <div class="col-3 text-center">
                            <img
                                src="<%= product.productId.images[0].secured_url %>"
                                class="cart-img"
                                alt="<%= product.productId.product %>">
                        </div>
                        <div class="col-9">
                            <h5><%= product.productId.product %></h5>
                            <p><strong>Price:</strong> $<%=
                                product.productId.finalPrice %></p>
                            <p><strong>Quantity:</strong> <%= product.quantity
                                %></p>
                            <p><strong>Subtotal:</strong> $<%=
                                (product.productId.finalPrice *
                                product.quantity).toFixed(2) %></p>
                        </div>
                    </div>
                </div>
                <% } %>
            </div>

            <div class="total-pricing">
                <div class="d-flex justify-content-between align-items-center">
                    <strong>Total Price:</strong>
                    <span class="h5">$<%= cart.totalPrice.toFixed(2) %></span>
                </div>

                <% if (cart.totalPrice !== cart.finalPrice) { %>
                <div
                    class="d-flex justify-content-between align-items-center mt-2">
                    <strong class="text-success">Discounted Price:</strong>
                    <span class="h5 text-success">$<%=
                        cart.finalPrice.toFixed(2) %></span>
                </div>
                <% } %>

                <% if (cart.deliveryCharge > 0) { %>
                <div
                    class="d-flex justify-content-between align-items-center mt-2">
                    <strong class="text-muted">Delivery Charge:</strong>
                    <span class="h6 text-muted">$<%=
                        cart.deliveryCharge.toFixed(2) %></span>
                </div>
                <% } else { %>
                <div
                    class="d-flex justify-content-between align-items-center mt-2">
                    <strong class="text-muted">Delivery Charge:</strong>
                    <span class="h6 text-success">Free</span>
                </div>
                <% } %>

                <hr>

                <div
                    class="d-flex justify-content-between align-items-center mt-3">
                    <strong class="h4 text-primary">Final Total:</strong>
                    <span class="h4 text-primary">$<%=
                        cart.finalPrice.toFixed(2) %></span>
                </div>
            </div>

            <% } else { %>
            <div class="text-center mt-5">
                <h3>Your cart is empty</h3>
                <a href="/products" class="btn btn-primary mt-3">Continue
                    Shopping</a>
            </div>
            <% } %>

            <!-- Shipping Address -->
            <div class="address-form">
                <h4><i class="fas fa-shipping-fast"></i> Shipping Address</h4>
                <form id="checkoutForm" action="/checkout" method="POST">

                    <% user.address.forEach((address, index) => { %>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio"
                            name="selectedAddress" id="address<%= index %>"
                            value="<%= address._id %>" <%=index === 0 ?
                            'checked' : '' %>>
                        <label class="form-check-label"
                            for="address<%= index %>">
                            <%= address.street %>, <%= address.city %>, <%=
                            address.state %> - <%= address.postalCode %>, <%=
                            address.country %>
                        </label>
                    </div>
                    <% }) %>

                    <!-- Add New Address Radio Button -->
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="radio"
                            name="selectedAddress" id="newAddress" value="new">
                        <label class="form-check-label" for="newAddress">
                            Add New Address
                        </label>
                    </div>

                    <!-- New Address Form -->
                    <div id="newAddressForm" style="display:none;">
                        <div class="form-group mt-3">
                            <label for="street">Street</label>
                            <input type="text" class="form-control"
                                id="newStreet" name="newStreet"
                                placeholder="123 Main St">
                        </div>
                        <div class="form-group">
                            <label for="city">City</label>
                            <input type="text" class="form-control" id="newCity"
                                name="newCity" placeholder="City">
                        </div>
                        <div class="form-group">
                            <label for="state">State</label>
                            <input type="text" class="form-control"
                                id="newState" name="newState"
                                placeholder="State">
                        </div>
                        <div class="form-group">
                            <label for="postalCode">Postal Code</label>
                            <input type="text" class="form-control"
                                id="newPostalCode" name="newPostalCode"
                                placeholder="Postal Code">
                        </div>
                        <div class="form-group">
                            <label for="country">Country</label>
                            <input type="text" class="form-control"
                                id="newCountry" name="newCountry"
                                placeholder="Country">
                        </div>
                        <div class="form-group">
                            <label for="phoneNo">Phone Number</label>
                            <input type="text" class="form-control"
                                id="newPhoneNo" name="newPhoneNo"
                                placeholder="Phone Number">
                        </div>
                        <button type="button" class="btn btn-success mt-3"
                            id="confirmNewAddress">Confirm Address</button>
                    </div>

                    <!-- Payment Method Section -->
                    <div class="payment-form mt-4">
                        <h4><i class="fas fa-credit-card"></i> Payment
                            Method</h4>
                        <div class="form-group">
                            <select class="form-control" id="paymentMethod"
                                name="paymentMethod">
                                <option value="cod">Cash on Delivery
                                    (COD)</option>
                                <option value="razorpay">Razorpay</option>
                                <option value="wallet">Wallet</option>
                            </select>
                        </div>
                    </div>

                    <!-- Place Order Button -->
                    <button type="submit"
                        class="btn btn-primary btn-lg btn-block mt-4"
                        id="placeOrder" disabled>
                        <i class="fas fa-lock"></i> Place Order Securely
                    </button>
                </form>
            </div>
        </div>

        <footer class="bg-dark text-white mt-5">
            <div class="container text-center py-4">
                <p>&copy; 2024 Your E-Commerce Site. All rights reserved.</p>
            </div>
        </footer>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script
            src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
        <script
            src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <!-- Scripts -->

        <script>
        document.addEventListener('DOMContentLoaded', function () {
            const couponCheckForm = document.getElementById('couponCheckForm');
            const discountMessage = document.getElementById('discountMessage');
            const couponError = document.getElementById('couponError');
            // const copyCouponButton = document.getElementById('copyCoupon');
            const removeCouponButton = document.getElementById('removeCoupon');
        
            // Function to reset coupon UI
            function resetCouponUI() {
                // Clear the coupon data from sessionStorage
                sessionStorage.removeItem('couponData');
                discountMessage.innerHTML = ''; // Clear discount messages
                couponError.textContent = ''; // Clear error messages
                // copyCouponButton.style.display = 'none'; // Hide "Copy Coupon" button
                removeCouponButton.style.display = 'none'; // Hide "Remove Coupon" button
            }
        
            // Function to update UI based on coupon state
            function updateCouponUI() {
                const couponData = sessionStorage.getItem('couponData');
                if (couponData) {
                    const { couponCode, totalPrice, discount, discountPercentage } = JSON.parse(couponData);
                    discountMessage.innerHTML = `
                        <p>Coupon applied! Final Price: $${totalPrice.toFixed(2)}</p>
                        <p>Discount: $${discount.toFixed(2)} (${discountPercentage}%)</p>
                    `;
                    // copyCouponButton.style.display = 'block'; // Show the "Copy Coupon" button
                    removeCouponButton.style.display = 'block'; // Show the "Remove Coupon" button
                    // copyCouponButton.onclick = () => {
                    //     navigator.clipboard.writeText(couponCode);
                    //     alert('Coupon code copied to clipboard!');
                    // };
                } else {
                    resetCouponUI(); // Reset UI if no coupon is applied
                }
            }
        
            // Call updateCouponUI on page load to reflect any existing coupon data
            updateCouponUI();
        
            // Handle Apply Coupon
            couponCheckForm.addEventListener('submit', async function (e) {
                e.preventDefault(); // Prevent the default form submission
        
                const couponCode = document.getElementById('couponCode').value;
                couponError.textContent = ''; // Clear previous errors
        
                try {
                    const response = await fetch('/checkout/coupon-check', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ couponCode })
                    });
        
                    const result = await response.json();
        
                    if (result.success) {
                        // Store coupon data in sessionStorage
                        sessionStorage.setItem('couponData', JSON.stringify({
                            couponCode,
                            totalPrice: result.totalPrice,
                            discount: result.discount,
                            discountPercentage: result.discountPercentage
                        }));
                        location.reload()
                        // Update the UI after applying the coupon
                        updateCouponUI();
                    } else {
                        // Show error message
                        discountMessage.innerHTML = '';
                        couponError.textContent = result.message;
                        // copyCouponButton.style.display = 'none'; // Hide buttons if coupon check fails
                        removeCouponButton.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Error applying coupon:', error);
                    couponError.textContent = 'An error occurred. Please try again.';
                }
            });
        
            // Handle Remove Coupon
            removeCouponButton.addEventListener('click', async function () {
                try {
                    const response = await fetch('/checkout/coupon-delete', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                    });
        
                    const result = await response.json();
        
                    if (response.ok) {
                        // Clear coupon data from sessionStorage
                        sessionStorage.removeItem('couponData');
                        location.reload()
                        // Update UI after removing coupon
                        updateCouponUI();
                    } else {
                        // Show error message
                        couponError.textContent = result.message;
                    }
                } catch (error) {
                    console.error('Error removing coupon:', error);
                    couponError.textContent = 'An error occurred. Please try again.';
                }
            });
        
            // Function to start a new checkout
            function startNewCheckout() {
                // Reset the coupon UI and other necessary state
                resetCouponUI(); // Reset the coupon UI
                // Logic for new checkout can be added here if needed
                // e.g., clear cart items, update UI elements, etc.
                updateCouponUI(); // Call to ensure UI is up to date
            }
        
            // Example: Call startNewCheckout when navigating to checkout again
            document.getElementById('placeOrder').addEventListener('click', startNewCheckout);
        
            // If you want to reset when an order is successful
            document.getElementById('simulateOrderSuccessButton').addEventListener('click', function() {
                // Simulate order success logic...
                startNewCheckout(); // Call to reset coupon for new order
            });
        });
        </script>

        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
        $(document).ready(function () {
            let isCheckPassed = false;
        
            // Show new address form
            $('input[name="selectedAddress"]').on('change', function () {
                if ($(this).val() === 'new') {
                    $('#newAddressForm').show();
                    $('#placeOrder').prop('disabled', true);
                } else {
                    $('#newAddressForm').hide();
                    $('#placeOrder').prop('disabled', false);
                }
                checkCatPro();
            });
        
            // Confirm new address
            $('#confirmNewAddress').on('click', function () {
                const street = $('#newStreet').val();
                const city = $('#newCity').val();
                const state = $('#newState').val();
                const postalCode = $('#newPostalCode').val();
                const country = $('#newCountry').val();
                const phoneNo = $('#newPhoneNo').val();
        
                if (!street || !city || !state || !postalCode || !country || !phoneNo) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Incomplete Address',
                        text: 'Please fill in all address fields.',
                    });
                    return;
                }
        
                Swal.fire({
                    icon: 'success',
                    title: 'Address Confirmed',
                    text: 'New address has been confirmed.',
                });
                $('#placeOrder').prop('disabled', false);
                checkCatPro();
            });
        
            // Payment method change
            $('#paymentMethod').on('change', checkCatPro);
        
            function checkCatPro() {
                $('#placeOrder').prop('disabled', true);
                return fetch('/checkout/checkcatpro', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        paymentMethod: $('#paymentMethod').val()
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        isCheckPassed = true;
                        $('#placeOrder').prop('disabled', false);
                    } else {
                        isCheckPassed = false;
                        $('#placeOrder').prop('disabled', true);
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: data.message,
                        });
                    }
                })
                .catch(error => {
                    console.error('Error checking category and product:', error);
                    isCheckPassed = false;
                    $('#placeOrder').prop('disabled', true);
                    Swal.fire({
                        icon: 'error',
                        title: 'Server Error',
                        text: 'An error occurred while checking your order. Please try again.',
                    });
                });
            }
        
            $('#checkoutForm').on('submit', function (e) {
                e.preventDefault();
        
                if (!isCheckPassed) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Unable to Proceed',
                        text: 'Please ensure all items in your cart are available and meet the requirements.',
                    });
                    return;
                }
        
                const paymentMethod = $('#paymentMethod').val();
                const selectedAddress = $('input[name="selectedAddress"]:checked').val();
        
                let addressDetails = {};
                if (selectedAddress === 'new') {
                    addressDetails = {
                        street: $('#newStreet').val(),
                        city: $('#newCity').val(),
                        state: $('#newState').val(),
                        postalCode: $('#newPostalCode').val(),
                        country: $('#newCountry').val(),
                        phoneNo: $('#newPhoneNo').val()
                    };
                    if (Object.values(addressDetails).some(value => !value)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Incomplete Address',
                            text: 'Please fill in all address fields.',
                        });
                        return;
                    }
                }
        
                const checkoutData = {
                    paymentMethod,
                    selectedAddress,
                    addressDetails
                };
        
                $('#placeOrder').prop('disabled', true);
        
                fetch('/checkout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(checkoutData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (paymentMethod === 'razorpay') {
                            const options = {
                                key: 'rzp_test_ovddchQMnrblMK',
                                amount: data.amount,
                                currency: "INR",
                                name: "Your E-Commerce Site",
                                description: "Order Payment",
                                order_id: data.razorpayOrderId,
                                handler: function (response) {
                                    verifyPayment({
                                        order: data.orderId,
                                        orderId: data.razorpayOrderId,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature
                                    });
                                },
                                modal: {
                                    ondismiss: function () {
                                        handlePaymentFailure(data.orderId);
                                    }
                                },
                                prefill: {
                                    name: "Customer Name",
                                    email: "customer@example.com",
                                    contact: "9999999999"
                                },
                                theme: {
                                    color: "#F37254"
                                }
                            };
        
                            const rzp = new Razorpay(options);
                            rzp.open();
                        } else {
                            window.location.href = `/checkout/order-confirmation/${data.orderId}`;
                        }
                    } else {
                        handlePaymentFailure(data.orderId);
                    }
                })
                .catch((error) => {
                    console.error('Error during checkout:', error);
                    handlePaymentFailure();
                })
                .finally(() => {
                    $('#placeOrder').prop('disabled', false);
                });
            });
        
            function verifyPayment(paymentResponse) {
                fetch('/api/verify-payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        order: paymentResponse.order,
                        orderId: paymentResponse.orderId,
                        paymentId: paymentResponse.razorpay_payment_id,
                        signature: paymentResponse.razorpay_signature
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = `/checkout/order-confirmation/${paymentResponse.order}`;
                    } else {
                        handlePaymentFailure(paymentResponse.order);
                    }
                })
                .catch(error => {
                    console.error('Error during payment verification:', error);
                    handlePaymentFailure(paymentResponse.order);
                });
            }
        
            function handlePaymentFailure(orderId) {
                if (orderId) {
                    updateOrderStatus(orderId, 'payment_failed');
                }
                
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Failed',
                    text: 'Your payment could not be processed. You will be redirected to the failure page.',
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.href = `/checkout/payment-failed${orderId ? '/' + orderId : ''}`;
                });
            }
        
            function updateOrderStatus(orderId, status) {
                fetch(`/update-order-status/${orderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status: status })
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        console.error('Failed to update order status');
                    }
                })
                .catch(error => {
                    console.error('Error updating order status:', error);
                });
            }
        });
        </script>

    </body>

</html>