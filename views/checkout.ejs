<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Checkout</title>
        <link
            href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap"
            rel="stylesheet">
        <link rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
        <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2ecc71;
            --background-color: #f4f6f8;
            --text-color: #333;
            --card-bg: #ffffff;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .checkout-header {
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 2rem;
            font-weight: 600;
            font-size: 2.5rem;
        }

        .card {
            background-color: var(--card-bg);
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .card h4 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .coupon-form {
            display: flex;
            gap: 1rem;
        }

        .form-control {
            flex-grow: 1;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 5px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: #2980b9;
        }

        .cart-item {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            padding: 1rem;
            background-color: #f9f9f9;
            border-radius: 5px;
        }

        .cart-img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 5px;
            margin-right: 1rem;
        }

        .cart-item-details {
            flex-grow: 1;
        }

        .total-pricing {
            font-size: 1.1rem;
            margin-top: 1rem;
        }

        .address-form, .payment-form {
            margin-top: 2rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
        }

        .form-check {
            margin-bottom: 0.5rem;
        }

        #placeOrder {
            background-color: var(--secondary-color);
            color: white;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            margin-top: 2rem;
            width: 100%;
        }

        #placeOrder:hover {
            background-color: #27ae60;
        }

        footer {
            background-color: #2c3e50;
            color: white;
            text-align: center;
            padding: 1rem 0;
            margin-top: 3rem;
        }

        .order-summary {
            position: sticky;
            top: 20px;
            background-color: var(--card-bg);
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .order-summary h4 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .order-summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .order-total {
            font-weight: bold;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #eee;
        }

        .checkout-content {
            display: flex;
            gap: 2rem;
        }

        .checkout-main {
            flex: 1;
        }

        .checkout-sidebar {
            width: 300px;
        }

        @media (max-width: 768px) {
            .coupon-form {
                flex-direction: column;
            }

            .checkout-content {
                flex-direction: column;
            }

            .checkout-sidebar {
                width: 100%;
            }

            .order-summary {
                position: static;
            }
        }
       
      
       
    </style>
    </head>
    <body>

        <div class="container">
            <h2 class="checkout-header">Secure Checkout</h2>

            <div class="checkout-content">
                <div class="checkout-main">
                    <div class="card">
                        <h4><i class="fas fa-tags"></i> Apply Coupon</h4>
                        <form id="couponCheckForm" class="coupon-form">
                            <input type="text" name="couponCode" id="couponCode"
                                placeholder="Enter your coupon code"
                                class="form-control">
                            <button type="submit" class="btn btn-primary">Apply
                                Coupon</button>
                        </form>
                        <div id="discountMessage"
                            class="discount-message"></div>
                        <div id="couponError"
                            class="coupon-error text-danger"></div>
                        <button id="removeCoupon"
                            class="btn btn-outline-danger mt-2"
                            style="display:none;">Remove Coupon</button>
                    </div>

                    <div class="card">
                        <h4><i class="fas fa-shopping-cart"></i> Your Cart</h4>
                        <% if (cart && cart.products && cart.products.length >
                        0) { %>
                        <% for (const product of cart.products) { %>
                        <div class="cart-item">
                            <img
                                src="<%= product.productId.images[0].secured_url %>"
                                class="cart-img"
                                alt="<%= product.productId.product %>">
                            <div class="cart-item-details">
                                <h5><%= product.productId.product %></h5>
                                <p>Price: ₹<%= product.productId.finalPrice
                                    %></p>
                                <p>Quantity: <%= product.quantity %></p>
                                <p>Subtotal: ₹<%= (product.productId.finalPrice
                                    * product.quantity).toFixed(2) %></p>
                            </div>
                        </div>
                        <% } %>
                        <% } else { %>
                        <div class="text-center mt-5">
                            <h3>Your cart is empty</h3>
                            <a href="/products"
                                class="btn btn-primary mt-3">Continue
                                Shopping</a>
                        </div>
                        <% } %>
                    </div>

                    <div class="card address-form">
                        <h4><i class="fas fa-shipping-fast"></i> Shipping
                            Address</h4>
                        <form id="checkoutForm" action="/checkout"
                            method="POST">
                            <% user.address.forEach((address, index) => { %>
                            <div class="form-check">
                                <input class="form-check-input" type="radio"
                                    name="selectedAddress"
                                    id="address<%= index %>"
                                    value="<%= address._id %>" <%=index === 0 ?
                                    'checked' : '' %>>
                                <label class="form-check-label"
                                    for="address<%= index %>">
                                    <%= address.street %>, <%= address.city %>,
                                    <%= address.state %> - <%=
                                    address.postalCode %>, <%= address.country
                                    %>
                                </label>
                            </div>
                            <% }) %>

                            <div class="form-check">
                                <input class="form-check-input" type="radio"
                                    name="selectedAddress" id="newAddress"
                                    value="new">
                                <label class="form-check-label"
                                    for="newAddress">Add New Address</label>
                            </div>

                            <div id="newAddressForm" style="display:none;">
                                <div class="form-group">
                                    <label for="street">Street</label>
                                    <input type="text" class="form-control"
                                        id="newStreet" name="newStreet"
                                        placeholder="123 Main St">
                                </div>
                                <div class="form-group">
                                    <label for="city">City</label>
                                    <input type="text" class="form-control"
                                        id="newCity" name="newCity"
                                        placeholder="City">
                                </div>
                                <div class="form-group">
                                    <label for="state">State</label>
                                    <input type="text" class="form-control"
                                        id="newState" name="newState"
                                        placeholder="State">
                                </div>
                                <div class="form-group">
                                    <label for="postalCode">Postal Code</label>
                                    <input type="text" class="form-control"
                                        id="newPostalCode" name="newPostalCode"
                                        placeholder="Postal Code">
                                </div>
                                <div class="form-group">
                                    <label for="country">Country</label>
                                    <input type="text" class="form-control"
                                        id="newCountry" name="newCountry"
                                        placeholder="Country">
                                </div>
                                <div class="form-group">
                                    <label for="phoneNo">Phone Number</label>
                                    <input type="text" class="form-control"
                                        id="newPhoneNo" name="newPhoneNo"
                                        placeholder="Phone Number">
                                </div>
                                <button type="button" class="btn btn-primary"
                                    id="confirmNewAddress">Confirm
                                    Address</button>
                            </div>

                            <div class="payment-form mt-4">
                                <h4><i class="fas fa-credit-card"></i> Payment
                                    Method</h4>
                                <div class="form-group">
                                    <select class="form-control"
                                        id="paymentMethod" name="paymentMethod">
                                        <option value="cod">Cash on Delivery
                                            (COD)</option>
                                        <option
                                            value="razorpay">Razorpay</option>
                                        <option value="wallet">Wallet</option>
                                    </select>
                                </div>
                            </div>

                            <button type="submit" class="btn" id="placeOrder"
                                disabled>
                                <i class="fas fa-lock"></i> Place Order Securely
                            </button>
                        </form>
                    </div>
                </div>

                <div class="checkout-sidebar">
                    <div class="order-summary">
                        <h4><i class="fas fa-receipt"></i> Order Summary</h4>
                        <% if (cart && cart.products && cart.products.length >
                        0) { %>
                        <div class="order-summary-item">
                            <span>Subtotal:</span>
                            <span>₹<%= cart.totalPrice.toFixed(2) %></span>
                        </div>
                        <% if (cart.totalPrice !== cart.finalPrice) { %>
                        <div class="order-summary-item">
                            <span>Discount:</span>
                            <span>₹<%= (cart.totalPrice -
                                cart.finalPrice).toFixed(2) %></span>
                        </div>
                        <% } %>
                        <% if (cart.deliveryCharge > 0) { %>
                        <div class="order-summary-item">
                            <span>Delivery Charge:</span>
                            <span>₹<%= cart.deliveryCharge.toFixed(2) %></span>
                        </div>
                        <% } else { %>
                        <div class="order-summary-item">
                            <span>Delivery Charge:</span>
                            <span>Free</span>
                        </div>
                        <% } %>
                        <div class="order-summary-item order-total">
                            <span>Total:</span>
                            <span>₹<%= cart.finalPrice.toFixed(2) %></span>
                        </div>
                        <% } else { %>
                        <p>No items in cart</p>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>

        <footer>
            <p>&copy; 2024 Your E-Commerce Site. All rights reserved.</p>
        </footer>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
        <script
            src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
        <script
            src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <!-- Scripts -->

        <script>
        document.addEventListener('DOMContentLoaded', function () {
            const couponCheckForm = document.getElementById('couponCheckForm');
            const discountMessage = document.getElementById('discountMessage');
            const couponError = document.getElementById('couponError');
            // const copyCouponButton = document.getElementById('copyCoupon');
            const removeCouponButton = document.getElementById('removeCoupon');
        
            // Function to reset coupon UI
            function resetCouponUI() {
                // Clear the coupon data from sessionStorage
                sessionStorage.removeItem('couponData');
                discountMessage.innerHTML = ''; // Clear discount messages
                couponError.textContent = ''; // Clear error messages
                // copyCouponButton.style.display = 'none'; // Hide "Copy Coupon" button
                removeCouponButton.style.display = 'none'; // Hide "Remove Coupon" button
            }
        
            // Function to update UI based on coupon state
            function updateCouponUI() {
                const couponData = sessionStorage.getItem('couponData');
                if (couponData) {
                    const { couponCode, totalPrice, discount, discountPercentage } = JSON.parse(couponData);
                    discountMessage.innerHTML = `
                        <p>Coupon applied! Final Price: ₹${totalPrice.toFixed(2)}</p>
                        <p>Discount: ₹${discount.toFixed(2)} (${discountPercentage}%)</p>
                    `;
                    // copyCouponButton.style.display = 'block'; // Show the "Copy Coupon" button
                    removeCouponButton.style.display = 'block'; // Show the "Remove Coupon" button
                    // copyCouponButton.onclick = () => {
                    //     navigator.clipboard.writeText(couponCode);
                    //     alert('Coupon code copied to clipboard!');
                    // };
                } else {
                    resetCouponUI(); // Reset UI if no coupon is applied
                }
            }
        
            // Call updateCouponUI on page load to reflect any existing coupon data
            updateCouponUI();
        
            // Handle Apply Coupon
            couponCheckForm.addEventListener('submit', async function (e) {
                e.preventDefault(); // Prevent the default form submission
        
                const couponCode = document.getElementById('couponCode').value;
                couponError.textContent = ''; // Clear previous errors
        
                try {
                    const response = await fetch('/checkout/coupon-check', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ couponCode })
                    });
        
                    const result = await response.json();
        
                    if (result.success) {
                        // Store coupon data in sessionStorage
                        sessionStorage.setItem('couponData', JSON.stringify({
                            couponCode,
                            totalPrice: result.totalPrice,
                            discount: result.discount,
                            discountPercentage: result.discountPercentage
                        }));
                        location.reload()
                        // Update the UI after applying the coupon
                        updateCouponUI();
                    } else {
                        // Show error message
                        discountMessage.innerHTML = '';
                        couponError.textContent = result.message;
                        // copyCouponButton.style.display = 'none'; // Hide buttons if coupon check fails
                        removeCouponButton.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Error applying coupon:', error);
                    couponError.textContent = 'An error occurred. Please try again.';
                }
            });
        
            // Handle Remove Coupon
            removeCouponButton.addEventListener('click', async function () {
                try {
                    const response = await fetch('/checkout/coupon-delete', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                    });
        
                    const result = await response.json();
        
                    if (response.ok) {
                        // Clear coupon data from sessionStorage
                        sessionStorage.removeItem('couponData');
                        location.reload()
                        // Update UI after removing coupon
                        updateCouponUI();
                    } else {
                        // Show error message
                        couponError.textContent = result.message;
                    }
                } catch (error) {
                    console.error('Error removing coupon:', error);
                    couponError.textContent = 'An error occurred. Please try again.';
                }
            });
        
            // Function to start a new checkout
            function startNewCheckout() {
                // Reset the coupon UI and other necessary state
                resetCouponUI(); // Reset the coupon UI
                // Logic for new checkout can be added here if needed
                // e.g., clear cart items, update UI elements, etc.
                updateCouponUI(); // Call to ensure UI is up to date
            }
        
            // Example: Call startNewCheckout when navigating to checkout again
            document.getElementById('placeOrder').addEventListener('click', startNewCheckout);
        
            // If you want to reset when an order is successful
            document.getElementById('simulateOrderSuccessButton').addEventListener('click', function() {
                // Simulate order success logic...
                startNewCheckout(); // Call to reset coupon for new order
            });
        });
        </script>

        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
            $(document).ready(function () {
                let isCheckPassed = false;
                
                // Initially disable the Place Order button
                $('#placeOrder').prop('disabled', true);
                
                // Show new address form
                $('input[name="selectedAddress"]').on('change', function () {
                    if ($(this).val() === 'new') {
                        $('#newAddressForm').show();
                        $('#placeOrder').prop('disabled', true); // Disable until the new address is confirmed
                    } else {
                        $('#newAddressForm').hide();
                        $('#placeOrder').prop('disabled', false); // Enable if existing address is selected
                    }
                    checkCatPro();
                });
            
                // Confirm new address
                $('#confirmNewAddress').on('click', function () {
                    const street = $('#newStreet').val().trim();
                    const city = $('#newCity').val().trim();
                    const state = $('#newState').val().trim();
                    const postalCode = $('#newPostalCode').val().trim();
                    const country = $('#newCountry').val().trim();
                    const phoneNo = $('#newPhoneNo').val().trim();
            
                    const phoneRegex = /^\d{10}$/; // 10-digit phone numbers
                    const postalCodeRegex = /^[1-9][0-9]{5}$/; // Indian postal code format
            
                    // Check for empty fields
                    if (!street || !city || !state || !postalCode || !country || !phoneNo) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Incomplete Address',
                            text: 'Please fill in all address fields without spaces.',
                        });
                        return;
                    }
            
                    // Validate phone number
                    if (!phoneRegex.test(phoneNo)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Phone Number',
                            text: 'Please enter a valid 10-digit phone number.',
                        });
                        return;
                    }
            
                    // Validate postal code
                    if (!postalCodeRegex.test(postalCode)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Postal Code',
                            text: 'Please enter a valid 6-digit Indian postal code.',
                        });
                        return;
                    }
            
                    // Success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Address Confirmed',
                        text: 'New address has been confirmed.',
                    });
                    
                    $('#placeOrder').prop('disabled', false); // Enable Place Order button after confirming new address
                    checkCatPro();
                });
            
                // Payment method change
                $('#paymentMethod').on('change', checkCatPro);
            
                function checkCatPro() {
                    $('#placeOrder').prop('disabled', true);
                    return fetch('/checkout/checkcatpro', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            paymentMethod: $('#paymentMethod').val()
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            isCheckPassed = true;
                            $('#placeOrder').prop('disabled', false);
                        } else {
                            isCheckPassed = false;
                            $('#placeOrder').prop('disabled', true);
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: data.message,
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error checking category and product:', error);
                        isCheckPassed = false;
                        $('#placeOrder').prop('disabled', true);
                        Swal.fire({
                            icon: 'error',
                            title: 'Server Error',
                            text: 'An error occurred while checking your order. Please try again.',
                        });
                    });
                }
            
                $('#checkoutForm').on('submit', function (e) {
                    e.preventDefault();
           
                    // Check if an address is selected
                    const selectedAddress = $('input[name="selectedAddress"]:checked').val();
                    if (!selectedAddress) {
                        Swal.fire({
                            icon: 'error',
                            title: 'No Address Selected',
                            text: 'Please select an address before proceeding.',
                        });
                        return;
                    }
            
                    if (!isCheckPassed) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Unable to Proceed',
                            text: 'Please ensure all items in your cart are available and meet the requirements.',
                        });
                        return;
                    }
            
                    const paymentMethod = $('#paymentMethod').val();
            
                    let addressDetails = {};
                    if (selectedAddress === 'new') {
                        addressDetails = {
                            street: $('#newStreet').val(),
                            city: $('#newCity').val(),
                            state: $('#newState').val(),
                            postalCode: $('#newPostalCode').val(),
                            country: $('#newCountry').val(),
                            phoneNo: $('#newPhoneNo').val()
                        };
                        if (Object.values(addressDetails).some(value => !value)) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Incomplete Address',
                                text: 'Please fill in all address fields.',
                            });
                            return;
                        }
                    }
            
                    const checkoutData = {
                        paymentMethod,
                        selectedAddress,
                        addressDetails
                    };
            
                    $('#placeOrder').prop('disabled', true);
                    // show loader
             $('#loader').css('display', 'flex');
    $('#placeOrder').prop('disabled', true);
                    fetch('/checkout', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(checkoutData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            if (paymentMethod === 'razorpay') {
                                const options = {
                                    key: 'rzp_test_ovddchQMnrblMK',
                                    amount: data.amount,
                                    currency: "INR",
                                    name: "Your E-Commerce Site",
                                    description: "Order Payment",
                                    order_id: data.razorpayOrderId,
                                    handler: function (response) {
                                        verifyPayment({
                                            order: data.orderId,
                                            orderId: data.razorpayOrderId,
                                            razorpay_payment_id: response.razorpay_payment_id,
                                            razorpay_signature: response.razorpay_signature
                                        });
                                    },
                                    modal: {
                                        ondismiss: function () {
                                            handlePaymentFailure(data.orderId);
                                        }
                                    },
                                    prefill: {
                                        name: "Customer Name",
                                        email: "customer@example.com",
                                        contact: "9999999999"
                                    },
                                    theme: {
                                        color: "#F37254"
                                    }
                                };
            
                                const rzp = new Razorpay(options);
                                rzp.open();
                            } else {
                                window.location.href = `/checkout/order-confirmation/${data.orderId}`;
                            }
                        } else {
                            handlePaymentFailure(data.orderId);
                        }
                    })
                    .catch((error) => {
                        console.error('Error during checkout:', error);
                        handlePaymentFailure();
                    })
                    .finally(() => {
                        $('#placeOrder').prop('disabled', false);
                         // Hide loader
        $('#loader').hide();
        $('#placeOrder').prop('disabled', false);
                    });
                });
            
                function verifyPayment(paymentResponse) {
                    fetch('/api/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            order: paymentResponse.order,
                            orderId: paymentResponse.orderId,
                            paymentId: paymentResponse.razorpay_payment_id,
                            signature: paymentResponse.razorpay_signature
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = `/checkout/order-confirmation/${paymentResponse.order}`;
                        } else {
                            handlePaymentFailure(paymentResponse.order);
                        }
                    })
                    .catch(error => {
                        console.error('Error during payment verification:', error);
                        handlePaymentFailure(paymentResponse.order);
                    });
                }
            
                function handlePaymentFailure(orderId) {
                    if (orderId) {
                        updateOrderStatus(orderId, 'payment_failed');
                    }
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Failed',
                        text: 'Your payment could not be processed. You will be redirected to the failure page.',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = `/checkout/payment-failed${orderId ? '/' + orderId : ''}`;
                    });
                }
            
                function updateOrderStatus(orderId, status) {
                    fetch(`/api/update-order-status/${orderId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ status: status })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (!data.success) {
                            console.error('Failed to update order status');
                        }
                    })
                    .catch(error => {
                        console.error('Error updating order status:', error);
                    });
                }
            });
            </script>
        <!-- Loader Overlay -->
        <div id="loader" style="
    display: none;
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0,0,0,0.5);
    z-index: 9999;
    align-items: center;
    justify-content: center;
">
            <div style="
        border: 8px solid #f3f3f3;
        border-top: 8px solid #3498db;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        animation: spin 1s linear infinite;
    "></div>
        </div>

        <style>
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>
    </body>

</html>