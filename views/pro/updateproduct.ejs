<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Update Product</title>
        <link
            href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
            rel="stylesheet">
        <link
            href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css"
            rel="stylesheet">
        <link
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
            rel="stylesheet">
        <style>
        #imagePreviewContainer {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 600px;
            max-width: 90%;
            background-color: white;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            border-radius: 8px;
            padding: 20px;
            display: none;
            z-index: 1000;
        }
        #imagePreview {
            max-width: 100%;
            max-height: 400px;
        }
        .cropped-image-preview {
            width: 80px;
            height: 80px;
            object-fit: cover;
            margin: 8px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
        }
        .form-container {
            max-width: 700px;
            margin: 2rem auto;
        }
    </style>
    </head>
    <body class="bg-gray-50">
        <div class="form-container bg-white shadow-lg rounded-lg p-8">
            <h2
                class="text-3xl font-semibold text-gray-800 mb-6 text-center">Update
                Product</h2>
            <div id="error" class="mb-4"></div>
            <form id="productForm"
                action="/admin/products/edit-product/<%=product._id%>"
                method="POST" enctype="multipart/form-data" class="space-y-5">
                <div>
                    <label for="product"
                        class="block text-sm font-medium text-gray-600">Product
                        Name</label>
                    <input type="text"
                        class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2"
                        id="product" name="product"
                        value="<%=product.product%>">
                </div>
                <div>
                    <label for="brand"
                        class="block text-sm font-medium text-gray-600">Brand</label>
                    <input type="text"
                        class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2"
                        id="brand" name="brand" value="<%=product.brand%>">
                </div>
                <div>
                    <label for="description"
                        class="block text-sm font-medium text-gray-600">Description</label>
                    <textarea
                        class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2"
                        id="description" name="description"
                        rows="3"><%=product.description%></textarea>
                </div>
                <div>
                    <label for="price"
                        class="block text-sm font-medium text-gray-600">Price</label>
                    <input type="number"
                        class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2"
                        id="price" name="price" value="<%=product.price%>">
                </div>
                <div id="sizes-container" class="space-y-3">
                    <% if (product.sizes && product.sizes.length) { %>
                    <% product.sizes.forEach(function(size, index) { %>
                    <div class="size-group flex space-x-3 items-center">
                        <input type="text" name="sizes[<%= index %>][size]"
                            placeholder="Size" value="<%= size.size %>"
                            class="flex-1 border-gray-300 rounded-lg shadow-sm py-2">
                        <input type="number" name="sizes[<%= index %>][stock]"
                            placeholder="Stock" value="<%= size.stock %>"
                            class="flex-1 border-gray-300 rounded-lg shadow-sm py-2">
                        <button type="button"
                            class="remove-size-btn text-red-500 hover:text-red-700 text-sm">Remove</button>
                    </div>
                    <% }); %>
                    <% } else { %>
                    <div class="size-group flex space-x-3 items-center">
                        <input type="text" name="sizes[0][size]"
                            placeholder="Size"
                            class="flex-1 border-gray-300 rounded-lg shadow-sm py-2">
                        <input type="number" name="sizes[0][stock]"
                            placeholder="Stock"
                            class="flex-1 border-gray-300 rounded-lg shadow-sm py-2">
                        <button type="button"
                            class="remove-size-btn text-red-500 hover:text-red-700 text-sm">Remove</button>
                    </div>
                    <% } %>
                </div>
                <button type="button" id="add-size-btn"
                    class="text-indigo-600 hover:text-indigo-800 text-sm font-medium">Add
                    Size</button>
                <div>
                    <label for="category"
                        class="block text-sm font-medium text-gray-600">Category</label>
                    <select
                        class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 py-2"
                        id="category" name="category">
                        <% categories.forEach(function(category) { %>
                        <option value="<%= category._id %>"
                            <%=String(category._id) === String(product.category)
                            ? 'selected' : '' %>><%= category.name %></option>
                        <% }) %>
                    </select>
                </div>
                <div>
                    <label
                        class="block text-sm font-medium text-gray-600">Existing
                        Images</label>
                    <ul id="existingimages" class="flex flex-wrap gap-3 mt-2">
                        <% for (const image of product.images) { %>
                        <li class="flex flex-col items-center">
                            <img src="<%= image.secured_url %>"
                                alt="Product Image"
                                class="w-20 h-20 object-cover rounded-lg">
                            <button type="button"
                                class="remove-image-btn mt-1 text-red-500 hover:text-red-700 text-sm"
                                data-id="<%= image.id %>"
                                data-product-id="<%= product._id %>">Remove</button>
                        </li>
                        <% } %>
                    </ul>
                </div>
                <div>
                    <label for="productImages"
                        class="block text-sm font-medium text-gray-600">Product
                        Images (At least 3 total images required)</label>
                    <input type="file"
                        class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm py-2"
                        id="productImages" name="productImages" accept="image/*"
                        multiple>
                    <p class="mt-1 text-sm text-gray-500">Upload up to 5 images.
                        Crop each image before submitting. Existing images count
                        toward the minimum of 3.</p>
                </div>
                <div id="croppedImagesPreview"
                    class="flex flex-wrap gap-2"></div>
                <input type="hidden" id="croppedImages" name="croppedImages">
                <div class="flex space-x-3">
                    <button type="submit"
                        class="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition">Update
                        Product</button>
                    <button type="button"
                        onclick="window.location.href='/admin/products'"
                        class="flex-1 bg-gray-300 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-400 transition">Cancel</button>
                </div>
            </form>
            <div id="imagePreviewContainer">
                <h3 class="text-lg font-medium text-gray-700 mb-3">Crop
                    Image</h3>
                <img id="imagePreview" />
                <div class="flex space-x-3 mt-3">
                    <button type="button" id="cropButton"
                        class="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700">Crop
                        Image</button>
                    <button type="button" id="cancelCropButton"
                        class="flex-1 bg-gray-300 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-400">Cancel</button>
                </div>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script
            src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
        <script>
        document.querySelectorAll('.remove-image-btn').forEach(button => {
            button.addEventListener('click', async function() {
                const imageItem = this.parentElement;
                const imageId = this.getAttribute('data-id');
                const productId = this.getAttribute('data-product-id');

                try {
                    const response = await fetch(`/admin/products/delete-image/${productId}/${imageId}`, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    if (response.ok) {
                        imageItem.remove();
                        Swal.fire({
                            icon: 'success',
                            title: 'Image Removed',
                            text: 'The image was successfully removed.',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to delete image.',
                            timer: 1500,
                            showConfirmButton: false
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An unexpected error occurred.',
                        timer: 1500,
                        showConfirmButton: false
                    });
                }
            });
        });

        document.getElementById('add-size-btn').addEventListener('click', () => {
            const container = document.getElementById('sizes-container');
            const sizeGroups = container.querySelectorAll('.size-group').length;
            const sizeGroup = document.createElement('div');
            sizeGroup.className = 'size-group flex space-x-3 items-center';
            sizeGroup.innerHTML = `
                <input type="text" name="sizes[${sizeGroups}][size]" placeholder="Size" class="flex-1 border-gray-300 rounded-lg shadow-sm py-2">
                <input type="number" name="sizes[${sizeGroups}][stock]" placeholder="Stock" class="flex-1 border-gray-300 rounded-lg shadow-sm py-2">
                <button type="button" class="remove-size-btn text-red-500 hover:text-red-700 text-sm">Remove</button>
            `;
            container.appendChild(sizeGroup);
        });

        document.getElementById('sizes-container').addEventListener('click', (event) => {
            if (event.target.classList.contains('remove-size-btn')) {
                event.target.parentElement.remove();
            }
        });

        const productImagesInput = document.getElementById('productImages');
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const imagePreview = document.getElementById('imagePreview');
        const croppedImagesInput = document.getElementById('croppedImages');
        const cropButton = document.getElementById('cropButton');
        const cancelCropButton = document.getElementById('cancelCropButton');
        const croppedImagesPreview = document.getElementById('croppedImagesPreview');
        const existingImagesList = document.getElementById('existingimages');
        let cropper;
        let croppedImagesArray = [];
        let currentFileIndex = 0;
        let filesToCrop = [];

        productImagesInput.addEventListener('change', function(event) {
            filesToCrop = Array.from(event.target.files);
            const totalImages = croppedImagesArray.length + existingImagesList.querySelectorAll('li').length + filesToCrop.length;
            if (totalImages > 5) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Too Many Images',
                    text: 'You can have up to 5 images in total (existing + new).',
                    timer: 1500,
                    showConfirmButton: false
                });
                event.target.value = '';
                return;
            }
            if (filesToCrop.length > 0) {
                currentFileIndex = 0;
                loadImageForCropping(filesToCrop[currentFileIndex]);
            }
        });

        function loadImageForCropping(file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreviewContainer.style.display = 'block';
                if (cropper) cropper.destroy();
                cropper = new Cropper(imagePreview, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 1,
                    scalable: true
                });
            };
            reader.readAsDataURL(file);
        }

        function dataURLToBlob(dataURL) {
            const [header, base64] = dataURL.split(',');
            const mime = header.split(':')[1].split(';')[0];
            const binary = atob(base64);
            const array = [];
            for (let i = 0; i < binary.length; i++) {
                array.push(binary.charCodeAt(i));
            }
            return new Blob([new Uint8Array(array)], { type: mime });
        }

        cropButton.addEventListener('click', function() {
            if (cropper) {
                const canvas = cropper.getCroppedCanvas();
                const croppedImageData = canvas.toDataURL('image/jpeg');
                croppedImagesArray.push(croppedImageData);

                const imgPreview = document.createElement('img');
                imgPreview.src = croppedImageData;
                imgPreview.className = 'cropped-image-preview';
                croppedImagesPreview.appendChild(imgPreview);

                croppedImagesInput.value = JSON.stringify(croppedImagesArray);
                cropper.destroy();
                imagePreviewContainer.style.display = 'none';

                currentFileIndex++;
                if (currentFileIndex < filesToCrop.length) {
                    loadImageForCropping(filesToCrop[currentFileIndex]);
                } else {
                    productImagesInput.value = '';
                }
            }
        });

        cancelCropButton.addEventListener('click', function() {
            if (cropper) cropper.destroy();
            imagePreviewContainer.style.display = 'none';
            productImagesInput.value = '';
            currentFileIndex = 0;
            filesToCrop = [];
        });

        document.getElementById('productForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            const totalImages = croppedImagesArray.length + existingImagesList.querySelectorAll('li').length;
            if (totalImages < 3) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Insufficient Images',
                    text: `You have ${totalImages} images. Please ensure at least 3 images (existing + cropped) before submitting.`,
                    timer: 1500,
                    showConfirmButton: false
                });
                return;
            }

            const formData = new FormData(event.target);
            try {
                const response = await fetch(`/admin/products/edit-product/<%=product._id%>?_method=PATCH`, {
                    method: 'PATCH',
                    body: formData
                });
                const result = await response.json();
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Product updated successfully!',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        window.location.href = '/admin/products';
                    });
                } else {
                    document.getElementById('error').innerHTML = `<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg">${result.message}</div>`;
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('error').innerHTML = `<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg">An unexpected error occurred.</div>`;
            }
        });
    </script>
    </body>
</html>